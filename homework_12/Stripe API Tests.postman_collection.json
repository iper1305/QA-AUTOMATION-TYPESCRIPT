{
	"info": {
		"_postman_id": "52160cf5-ae72-4ab4-b37e-d2ce016fe98d",
		"name": "Stripe API Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "13669603"
	},
	"item": [
		{
			"name": "Create Client",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function generateRandomEmail() {",
							"    const domains = ['gmail.com', 'yahoo.com', 'outlook.com', 'example.com'];",
							"    const names = ['alex', 'maria', 'john', 'emma', 'michael', 'olivia', 'david', 'sophia'];",
							"    const numbers = '0123456789';",
							"    ",
							"    function getRandomNumberString(length) {",
							"        return Array.from({ length }, () => numbers[Math.floor(Math.random() * numbers.length)]).join('');",
							"    }",
							"    ",
							"    const username = names[Math.floor(Math.random() * names.length)] + getRandomNumberString(3);",
							"    const domain = domains[Math.floor(Math.random() * domains.length)];",
							"    ",
							"    return `${username}@${domain}`;",
							"}",
							"",
							"function generateRandomName() {",
							"    const firstNames = ['alex', 'maria', 'john', 'emma', 'michael', 'olivia', 'david', 'sophia'];",
							"    const lastNames = ['smith', 'johnson', 'williams', 'brown', 'jones', 'garcia', 'miller', 'davis'];",
							"    ",
							"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];",
							"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
							"    ",
							"    return `${firstName} ${lastName}`;",
							"}",
							"",
							"pm.collectionVariables.set(\"random_email\", generateRandomEmail());",
							"pm.collectionVariables.set(\"random_name\", generateRandomName());"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    if(pm.response.to.have.status(200)) {",
							"        pm.collectionVariables.set(\"customer_id\", jsonData.id);",
							"    }",
							"});",
							"",
							"pm.test(\"Check Response\", function () { ",
							"     pm.expect(jsonData.object).to.equal('customer');",
							"     pm.expect(jsonData.email).to.eql(pm.collectionVariables.get(\"random_email\"));",
							"     pm.expect(jsonData.name).to.eql(pm.collectionVariables.get(\"random_name\"));",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "email",
							"value": "{{random_email}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{random_name}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/v1/customers",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"v1",
						"customers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Client",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"   pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Check Response\", function () { ",
							"     pm.expect(jsonData.object).to.equal('customer');",
							"     pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"customer_id\"));",
							"     pm.expect(jsonData.email).to.eql(pm.collectionVariables.get(\"random_email\"));",
							"     pm.expect(jsonData.name).to.eql(pm.collectionVariables.get(\"random_name\"));",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/v1/customers/{{customer_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"v1",
						"customers",
						"{{customer_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit Client",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function generateRandomEmail() {",
							"    const domains = ['gmail.com', 'yahoo.com', 'outlook.com', 'example.com'];",
							"    const names = ['alex', 'maria', 'john', 'emma', 'michael', 'olivia', 'david', 'sophia'];",
							"    const numbers = '0123456789';",
							"    ",
							"    function getRandomNumberString(length) {",
							"        return Array.from({ length }, () => numbers[Math.floor(Math.random() * numbers.length)]).join('');",
							"    }",
							"    ",
							"    const username = names[Math.floor(Math.random() * names.length)] + getRandomNumberString(3);",
							"    const domain = domains[Math.floor(Math.random() * domains.length)];",
							"    ",
							"    return `${username}@${domain}`;",
							"}",
							"",
							"function generateRandomName() {",
							"    const firstNames = ['alex', 'maria', 'john', 'emma', 'michael', 'olivia', 'david', 'sophia'];",
							"    const lastNames = ['smith', 'johnson', 'williams', 'brown', 'jones', 'garcia', 'miller', 'davis'];",
							"    ",
							"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];",
							"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
							"    ",
							"    return `${firstName} ${lastName}`;",
							"}",
							"",
							"pm.collectionVariables.set(\"random_email\", generateRandomEmail());",
							"pm.collectionVariables.set(\"random_name\", generateRandomName());"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"   pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Check Response\", function () { ",
							"     pm.expect(jsonData.object).to.equal('customer');",
							"     pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"customer_id\"));",
							"     pm.expect(jsonData.email).to.eql(pm.collectionVariables.get(\"random_email\"));",
							"     pm.expect(jsonData.name).to.eql(pm.collectionVariables.get(\"random_name\"));",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "description",
							"value": "Updated customer",
							"type": "text"
						},
						{
							"key": "email",
							"value": "{{random_email}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{random_name}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/v1/customers/{{customer_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"v1",
						"customers",
						"{{customer_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Payment Method",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function getRandomToken() {",
							"    const tokens = ['tok_visa', 'tok_visa_debit', 'tok_mastercard', 'tok_amex'];",
							"    return tokens[Math.floor(Math.random() * tokens.length)];",
							"}",
							"",
							"pm.collectionVariables.set(\"random_token\", getRandomToken());"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    if(pm.response.to.have.status(200)) {",
							"        pm.collectionVariables.set(\"payment_method_id\", jsonData.id);",
							"         pm.collectionVariables.set(\"card_type\", jsonData.card.brand);",
							"    }",
							"});",
							"",
							"pm.test(\"Check Response\", function () { ",
							"     pm.expect(jsonData.object).to.equal('payment_method');",
							"    pm.expect(jsonData.type).to.equal('card');",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "type",
							"value": "card",
							"type": "text"
						},
						{
							"key": "card[token]",
							"value": "{{random_token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/v1/payment_methods",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"v1",
						"payment_methods"
					]
				}
			},
			"response": []
		},
		{
			"name": "Attach Payment Method",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"   pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Check Response\", function () { ",
							"     pm.expect(jsonData.object).to.equal('payment_method');",
							"     pm.expect(jsonData.customer).to.equal(pm.collectionVariables.get(\"customer_id\"));",
							"     pm.expect(jsonData.card.brand).to.eql(pm.collectionVariables.get(\"card_type\"));",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "customer",
							"value": "{{customer_id}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/v1/payment_methods/{{payment_method_id}}/attach",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"v1",
						"payment_methods",
						"{{payment_method_id}}",
						"attach"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Paymnt",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function generateRandomAmount(min = 100, max = 1000) {",
							"    return Math.floor(Math.random() * (max - min + 1) + min);",
							"}",
							"",
							"function getRandomCurrency() {",
							"    const currencies = ['usd', 'eur', 'gbp', 'jpy', 'aud', 'cad'];",
							"    return currencies[Math.floor(Math.random() * currencies.length)];",
							"}",
							"",
							"pm.collectionVariables.set(\"amount\", generateRandomAmount());",
							"pm.collectionVariables.set(\"currency\", getRandomCurrency());"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    if(pm.response.to.have.status(200)) {",
							"        pm.collectionVariables.set(\"payment_intent_id\", jsonData.id);",
							"    }",
							"});",
							"",
							"pm.test(\"Check Response\", function () { ",
							"     pm.expect(jsonData.object).to.equal('payment_intent');",
							"     pm.expect(jsonData.amount).to.equal(pm.collectionVariables.get(\"amount\"));",
							"     pm.expect(jsonData.currency).to.eql(pm.collectionVariables.get(\"currency\"));",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "amount",
							"value": "{{amount}}",
							"type": "text"
						},
						{
							"key": "currency",
							"value": "{{currency}}",
							"type": "text"
						},
						{
							"key": "customer",
							"value": "{{customer_id}}",
							"type": "text"
						},
						{
							"key": "payment_method",
							"value": "{{payment_method_id}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/v1/payment_intents",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"v1",
						"payment_intents"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm Paymant",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"   pm.environment.set(\"payment_intent_id\", jsonData.id);",
							"});",
							"",
							"pm.test(\"Check Response\", function () { ",
							"     pm.expect(['succeeded', 'requires_action', 'requires_confirmation', 'processing']).to.include(jsonData.status);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"packages": {},
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "return_url",
							"value": "https://your-website.com/payment-complete",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/v1/payment_intents/{{payment_intent_id}}/confirm",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"v1",
						"payment_intents",
						"{{payment_intent_id}}",
						"confirm"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Product",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function generateProductName() {",
							"    const adjectives = [\"Super\", \"Amazing\", \"Ultimate\", \"Eco\", \"Smart\", \"Premium\", \"Advanced\"];",
							"    const nouns = [\"Gadget\", \"Tool\", \"Device\", \"Machine\", \"System\", \"Product\", \"Item\"];",
							"",
							"    const randomAdjective = adjectives[Math.floor(Math.random() * adjectives.length)];",
							"    const randomNoun = nouns[Math.floor(Math.random() * nouns.length)];",
							"",
							"    return `${randomAdjective} ${randomNoun}`;",
							"}",
							"",
							"function generateProductDescription() {",
							"    const features = [",
							"        \"Designed to increase efficiency and productivity.\",",
							"        \"Compact and easy to use in any environment.\",",
							"        \"Built with high-quality materials for durability.\",",
							"        \"Equipped with the latest technology to ensure superior performance.\",",
							"        \"Environmentally friendly and energy-efficient.\",",
							"        \"Features a user-friendly interface for all ages.\"",
							"    ];",
							"",
							"    const randomFeature = features[Math.floor(Math.random() * features.length)];",
							"",
							"    return `The product is ${randomFeature}`;",
							"}",
							"",
							"pm.collectionVariables.set(\"product_name\", generateProductName());",
							"pm.collectionVariables.set(\"producr_description\", generateProductDescription());"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    if(pm.response.to.have.status(200)) {",
							"        pm.collectionVariables.set(\"product_id\", jsonData.id);",
							"    }",
							"});",
							"",
							"pm.test(\"Check Response\", function () { ",
							"     pm.expect(jsonData.object).to.equal('product');",
							"     pm.expect(jsonData.description).to.equal(pm.collectionVariables.get(\"producr_description\"));",
							"     pm.expect(jsonData.name).to.eql(pm.collectionVariables.get(\"product_name\"));",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "name",
							"value": "{{product_name}}",
							"type": "text"
						},
						{
							"key": "description",
							"value": "{{producr_description}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/v1/products",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"v1",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Price",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function generateRandomAmount(min = 1000, max = 4000) {",
							"    return Math.floor(Math.random() * (max - min + 1) + min);",
							"}",
							"",
							"function getRandomCurrency() {",
							"    const currencies = ['usd', 'eur', 'gbp', 'jpy', 'aud', 'cad'];",
							"    return currencies[Math.floor(Math.random() * currencies.length)];",
							"}",
							"",
							"function getRandomInterval() {",
							"    const intervals = ['week', 'year', 'month'];",
							"    return intervals[Math.floor(Math.random() * intervals.length)];",
							"}",
							"",
							"pm.collectionVariables.set(\"random_interval\", getRandomInterval());",
							"pm.collectionVariables.set(\"amount\", generateRandomAmount());",
							"pm.collectionVariables.set(\"currency\", getRandomCurrency());"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    if(pm.response.to.have.status(200)) {",
							"        pm.collectionVariables.set(\"price_id\", jsonData.id);",
							"    }",
							"});",
							"",
							"pm.test(\"Check Response\", function () { ",
							"     pm.expect(jsonData.object).to.equal('price');",
							"     pm.expect(jsonData.unit_amount).to.equal(pm.collectionVariables.get(\"amount\"));",
							"     pm.expect(jsonData.currency).to.eql(pm.collectionVariables.get(\"currency\"));",
							"     pm.expect(jsonData.recurring.interval).to.eql(pm.collectionVariables.get(\"random_interval\"));",
							"     pm.expect(jsonData.product).to.eql(pm.collectionVariables.get(\"product_id\"));",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "unit_amount",
							"value": "{{amount}}",
							"type": "text"
						},
						{
							"key": "currency",
							"value": "{{currency}}",
							"type": "text"
						},
						{
							"key": "recurring[interval]",
							"value": "{{random_interval}}",
							"type": "text"
						},
						{
							"key": "product",
							"value": "{{product_id}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/v1/prices",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"v1",
						"prices"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Subscription",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    if(pm.response.to.have.status(200)) {",
							"        pm.collectionVariables.set(\"subscription_id\", jsonData.id);",
							"    }",
							"});",
							"",
							"pm.test(\"Check Response\", function () { ",
							"     pm.expect(jsonData.object).to.equal('subscription');",
							"     pm.expect(jsonData.customer).to.equal(pm.collectionVariables.get(\"customer_id\"));",
							"     pm.expect(jsonData.items.data[0].price.id).to.eql(pm.collectionVariables.get(\"price_id\"));",
							"     pm.expect(jsonData.status).to.be.oneOf(['active', 'trialing']);",
							"     pm.expect(jsonData.default_payment_method).to.eql(pm.collectionVariables.get(\"payment_method_id\"));",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "customer",
							"value": "{{customer_id}}",
							"type": "text"
						},
						{
							"key": "items[0][price]",
							"value": "{{price_id}}",
							"type": "text"
						},
						{
							"key": "default_payment_method",
							"value": "{{payment_method_id}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://api.stripe.com/v1/subscriptions",
					"protocol": "https",
					"host": [
						"api",
						"stripe",
						"com"
					],
					"path": [
						"v1",
						"subscriptions"
					]
				}
			},
			"response": []
		},
		{
			"name": "Cancel Subscription",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"   pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Check Response\", function () { ",
							"     pm.expect(jsonData.object).to.equal('subscription');",
							"     pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"subscription_id\"));",
							"     pm.expect(jsonData.status).to.eql('canceled');",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/v1/subscriptions/{{subscription_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"v1",
						"subscriptions",
						"{{subscription_id}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "sk_test_51Qyelb2c9RC5za8mOKHjADvf07kLYYO5FmwR7UvNqznC9sRfewmGQaciXhflxv9wJSxY51Y0bCDeRaJfemLOlIyn002pfKmAsE",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://api.stripe.com",
			"type": "string"
		},
		{
			"key": "customer_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "card_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "payment_method_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "payment_intent_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "subscription_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "price_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "random_email",
			"value": "",
			"type": "string"
		},
		{
			"key": "random_name",
			"value": "",
			"type": "string"
		},
		{
			"key": "random_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "card_type",
			"value": "",
			"type": "string"
		},
		{
			"key": "amount",
			"value": "",
			"type": "string"
		},
		{
			"key": "currency",
			"value": "",
			"type": "string"
		},
		{
			"key": "product_name",
			"value": "",
			"type": "string"
		},
		{
			"key": "producr_description",
			"value": "",
			"type": "string"
		},
		{
			"key": "product_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "random_interval",
			"value": "",
			"type": "string"
		},
		{
			"key": "subscription_id",
			"value": "",
			"type": "string"
		}
	]
}